package org.uevola.jsonautovalidation.core

import mu.KLogging
import net.bytebuddy.ByteBuddy
import net.bytebuddy.dynamic.loading.ClassLoadingStrategy
import org.springframework.beans.factory.support.BeanDefinitionRegistry
import org.springframework.beans.factory.support.RootBeanDefinition
import org.uevola.jsonautovalidation.common.extensions.getMethodsToValidate
import org.uevola.jsonautovalidation.common.extensions.getParamsToValidate
import org.uevola.jsonautovalidation.common.extensions.isIgnoredType
import org.uevola.jsonautovalidation.common.utils.ClassPathUtil.getControllersToValidate
import org.uevola.jsonautovalidation.strategies.validators.JsonSchemaValidator
import java.lang.reflect.Parameter
import java.util.*
import kotlin.time.Duration
import kotlin.time.ExperimentalTime

object BeansGenerator : KLogging() {

    private var nbAutoGeneratedBeans = 0

    @ExperimentalTime
    fun generateBeans(registry: BeanDefinitionRegistry) {
        logger.info { "Generation of Json Validator Bean..." }
        val elapsed: Duration = kotlin.time.measureTime {
            getControllersToValidate().forEach { controller ->
                controller.getMethodsToValidate().forEach { method ->
                    method.getParamsToValidate(controller)
                        .forEach { parameter -> generateBeanValidator(registry, parameter) }
                }
            }
        }
        logger.info { "Generation of Json Validator Beans completed in ${elapsed.inWholeMilliseconds}ms" }
        logger.info { "Number of Json Validator Bean generated: $nbAutoGeneratedBeans" }
    }

    private fun generateBeanValidator(registry: BeanDefinitionRegistry, parameter: Parameter) {
        if (parameter.type.isIgnoredType()) return
        val beanName =
            parameter.type.simpleName.replaceFirstChar { it.lowercase(Locale.getDefault()) }.plus("Validator")
        if (registry.containsBeanDefinition(beanName)) return
        val beanDefinition = RootBeanDefinition(JsonSchemaValidator::class.java) {
            getJsonSchemaValidatorFor(parameter.type)
        }
        beanDefinition.targetType = JsonSchemaValidator::class.java
        registry.registerBeanDefinition(beanName, beanDefinition)
        nbAutoGeneratedBeans += 1
    }

    private fun getJsonSchemaValidatorFor(dtoClass: Class<*>?): JsonSchemaValidator {
        return ByteBuddy()
            .subclass(JsonSchemaValidator::class.java)
            .make()
            .load(JsonSchemaValidator::class.java.classLoader, ClassLoadingStrategy.Default.WRAPPER)
            .loaded
            .getDeclaredConstructor(Class::class.java)
            .apply { isAccessible = true }
            .newInstance(dtoClass)
    }

}