package org.uevola.jsonautovalidation.core

import mu.KLogging
import net.bytebuddy.ByteBuddy
import net.bytebuddy.description.modifier.Visibility
import net.bytebuddy.description.type.TypeDescription
import net.bytebuddy.dynamic.loading.ClassLoadingStrategy
import org.springframework.beans.factory.support.BeanDefinitionRegistry
import org.springframework.beans.factory.support.RootBeanDefinition
import org.springframework.core.ResolvableType
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import org.uevola.jsonautovalidation.configuration.JsonValidationConfig
import org.uevola.jsonautovalidation.utils.Util
import org.uevola.jsonautovalidation.utils.annotations.Validate
import org.uevola.jsonautovalidation.core.validators.JsonSchemaValidator
import java.lang.reflect.Parameter
import java.lang.reflect.ParameterizedType
import java.util.*
import kotlin.time.Duration
import kotlin.time.ExperimentalTime

@ExperimentalTime
object BeansGenerator: KLogging() {

    private var nbAutoGeneratedBeans = 0

    fun generateBeans(registry: BeanDefinitionRegistry) {
        logger.info { "Generation of Json Validator Bean..." }
        val elapsed: Duration = kotlin.time.measureTime {
            getControllersToValidate().forEach { controller ->
                getMethodsToValidate(controller).forEach { method ->
                    Util.getParamsToValidate(controller, method)
                        .filter { parameter -> parameter.parameterizedType !is ParameterizedType }
                        .forEach { parameter -> generateBeanValidator(registry, parameter) }
                }
            }
        }
        logger.info { "Generation of Json Validator Beans completed in ${elapsed.inWholeMilliseconds}ms" }
        logger.info { "Number of Json Validator Bean generated: $nbAutoGeneratedBeans" }
    }

    private fun getControllersToValidate(): Set<Class<*>> {
        val controllers = Util.findClassesByAnnotation(JsonValidationConfig.controllersPackageName, Controller::class.java)
        val restControllers = Util.findClassesByAnnotation(JsonValidationConfig.controllersPackageName, RestController::class.java)
        logger.info { "retrieve ${(controllers + restControllers).size} controllers" }
        return controllers + restControllers
    }

    private fun getMethodsToValidate(controller: Class<*>) =
        if (controller.annotations.any { it is Validate })
            controller.declaredMethods.toList()
        else
            controller.declaredMethods.filter { method ->
                method.annotations.any { annotation ->
                    annotation is RequestMapping || annotation.annotationClass.annotations.any { it is RequestMapping }
                }
            }

    private fun generateBeanValidator(registry: BeanDefinitionRegistry, parameter: Parameter) {
        if (Util.isJavaOrKotlinClass(parameter.type)) return
        val beanName =
            parameter.type.simpleName.replaceFirstChar { it.lowercase(Locale.getDefault()) }.plus("Validator")
        if (registry.containsBeanDefinition(beanName)) return
        val resolvableType = ResolvableType.forClassWithGenerics(JsonSchemaValidator::class.java, parameter.type)
        val beanDefinition =
            RootBeanDefinition(JsonSchemaValidator::class.java) { getJsonSchemaValidatorFor(parameter.type) }
        beanDefinition.setTargetType(resolvableType)
        registry.registerBeanDefinition(beanName, beanDefinition)
        nbAutoGeneratedBeans += 1
    }

    private fun getJsonSchemaValidatorFor(dtoClass: Class<*>?): JsonSchemaValidator<*> {
        val generic =
            TypeDescription.Generic.Builder.parameterizedType(JsonSchemaValidator::class.java, dtoClass).build()
        return ByteBuddy()
            .subclass(generic)
            .defineField("names", generic, Visibility.PRIVATE)
            .make()
            .load(JsonSchemaValidator::class.java.classLoader, ClassLoadingStrategy.Default.WRAPPER)
            .loaded
            .getDeclaredConstructor()
            .apply { isAccessible = true }
            .newInstance() as JsonSchemaValidator<*>
    }

}